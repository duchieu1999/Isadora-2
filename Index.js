const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');

const token = '6748384489:AAGV42T0PoOel_1519X5ot_rLLnpQqqDTdA';
const bot = new TelegramBot(token, { polling: true });

// ƒê∆∞·ªùng d·∫´n t·ªõi file l∆∞u tr·ªØ d·ªØ li·ªáu
const dataFilePath = 'members_photos.json';

// Load d·ªØ li·ªáu t·ª´ file
let membersPhotos = {};
if (fs.existsSync(dataFilePath)) {
    membersPhotos = JSON.parse(fs.readFileSync(dataFilePath));
}

// Chu·ªói c·∫•m
const bannedStringsRegex = /(ca\s?1|ca1|ca\s?2|Ca\s?2|Ca\s?1|Ca1|Ca\s?2|Ca2)/gi;

// L∆∞u tr·ªØ tin nh·∫Øn ch·ª©a h√¨nh ·∫£nh c·ªßa t·ª´ng th√†nh vi√™n
let photoMessages = {};

// ƒê·ªëi t∆∞·ª£ng l∆∞u tr·ªØ th√¥ng tin c·ªßa m·ªói th√†nh vi√™n trong nh√≥m
const memberInfo = {};

// L·ªùi ch√†o v√† URL h√¨nh ·∫£nh
const greetingMessage = "Ch√†o c√°c c·∫≠u, t·ªõ l√† Isadora ƒë√¢y üê∑, t·ªõ l√† AI tr·ª£ l√Ω c·ªßa anh Hieu G√† üêî, t·ªõ s·∫Ω l√† ng∆∞·ªùi qu·∫£n l√Ω b√†i n·ªôp c·ªßa m·ªçi ng∆∞·ªùi nh√©! üë©‚Äçüé§";
const imageUrl = "https://iili.io/Jvt7fTP.png";

// L·∫Øng nghe s·ª± ki·ªán khi nh·∫≠n l·ªánh /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;

    // G·ª≠i l·ªùi ch√†o v√† URL h√¨nh ·∫£nh v√†o nh√≥m
    bot.sendMessage(chatId, greetingMessage);
    bot.sendPhoto(chatId, imageUrl);
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;

    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a ·∫£nh
    if (msg.photo) {
        const userId = msg.from.id;

        // L∆∞u tin nh·∫Øn g·ª≠i h√¨nh ·∫£nh c·ªßa th√†nh vi√™n
        photoMessages[userId] = photoMessages[userId] || [];
        photoMessages[userId].push({ messageId: msg.message_id, date: msg.date });

        // TƒÉng s·ªë ·∫£nh ƒë√£ g·ª≠i c·ªßa th√†nh vi√™n
        membersPhotos[userId] = (membersPhotos[userId] || 0) + 1;

        // L∆∞u d·ªØ li·ªáu v√†o file
        fs.writeFileSync(dataFilePath, JSON.stringify(membersPhotos));
                                    
// Reset t·ªïng s·ªë ·∫£nh c·ªßa th√†nh vi√™n sau 10 gi√¢y
        setTimeout(() => {
            membersPhotos[userId] = 0;
            fs.writeFileSync(dataFilePath, JSON.stringify(membersPhotos));
        }, 60000); // 10 gi√¢y
    }

    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a chu·ªói c·∫•m
    if (msg.text && bannedStringsRegex.test(msg.text)) {
        bot.sendMessage(chatId, 'M√¨nh ƒëang ki·ªÉm tra b√†i n·ªôp c·ªßa b·∫°n... ch·ªù ch√∫t üê∑ z zz', { reply_to_message_id: msg.message_id }).then(() => {
            setTimeout(() => {
                const matches = msg.text.match(bannedStringsRegex);
                if (matches) {
                    let sum = 0;
                    matches.forEach(match => {
                        const index = msg.text.indexOf(match);
                        const numbersAfterMatch = msg.text.substring(index + match.length).match(/\d+/g);
                        if (numbersAfterMatch) {
                            sum += numbersAfterMatch.reduce((acc, cur) => acc + parseInt(cur), 0);
                        }
                    });

const userId = msg.from.id;
                    const userPhotoCount = membersPhotos[userId] || 0;

                    if (sum === userPhotoCount) {
                        bot.sendMessage(chatId, 'B√†i n·ªôp h·ª£p l·ªá, ƒë√£ ghi nh·∫≠n v√†o b·∫£ng c√¥ng ‚ù§ü•≥', { reply_to_message_id: msg.message_id });
                    } else {
                        bot.sendMessage(chatId, 'B√†i n·ªôp kh√¥ng h·ª£p l·ªá üò≠ c√≥ th·ªÉ do ƒë·∫øm sai s·ªë l∆∞·ª£ng qu·∫©y ho·∫∑c n·ªôp sai quy ƒë·ªãnh ü•∫, b√†i n·ªôp c·ªßa b·∫°n ƒë√£ b·ªã g·ª° h√£y ki·ªÉm tra v√† n·ªôp l·∫°i! ü§ßüêµ', { reply_to_message_id: msg.message_id }).then(() => {
                            // X√≥a t·∫•t c·∫£ c√°c tin nh·∫Øn ch·ª©a h√¨nh ·∫£nh ƒë∆∞·ª£c g·ª≠i trong 20 gi√¢y tr·ªü l·∫°i ƒë√¢y c·ªßa th√†nh vi√™n
                            if (photoMessages[userId] && photoMessages[userId].length > 0) {
                                const currentTime = Math.floor(Date.now() / 1000);
                                const twentySecondsAgo = currentTime - 20;
                                const recentPhotoMessages = photoMessages[userId].filter(message => message.date >= twentySecondsAgo);
                                recentPhotoMessages.forEach(message => {
                                    bot.deleteMessage(chatId, message.messageId);
                                });
                            }
                        });
                    }
                }
            }, 5000); // 5 gi√¢y
        });
    }

    // Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a c√°c t·ª´ g·ª≠i l·ªùi ch√†o
    if (msg.text && /(Ch√†o bot|Ch√†o ch·ªã|Ch√†o isadora|Isadora|C·∫≠u xinh qu√°|Hi isadora|Ch√†o em|Xinh th·∫ø)/i.test(msg.text)) {
        bot.sendMessage(chatId, greetingMessage, { reply_to_message_id: msg.message_id });
    }

    // Ki·ªÉm tra n·∫øu c√≥ ai ƒë√≥ tr√≠ch d·∫´n tin nh·∫Øn g·ªëc c·ªßa bot
    if (msg.reply_to_message && msg.reply_to_message.from.username === 'Trolyaihieuga_bot') {
        bot.sendMessage(chatId, "T·ªõ ko hi·ªÉu ü•∫, t·ªõ ch·ªâ l√† AI ƒë∆∞·ª£c anh Hieu G√† ƒë√†o t·∫°o ƒë·ªÉ qu·∫£n l√Ω b√†i n·ªôp c·ªßa m·ªçi ng∆∞·ªùi üòä. Hi v·ªçng t∆∞∆°ng lai t·ªõ s·∫Ω bi·∫øt nhi·ªÅu th·ª© h∆°n ü§Ø", { reply_to_message_id: msg.message_id });
    }
});

// L·ªánh ƒë·ªÉ bot tr·∫£ v·ªÅ th√¥ng tin c·ªßa m·ªói th√†nh vi√™n trong nh√≥m
bot.onText(/\/member_info/, (msg) => {
    const chatId = msg.chat.id;
    let response = '';

    response += `B·∫£ng c√¥ng ng√†y h√¥m nay (${new Date().toLocaleDateString()}):\n`;
    response += 'H·ªç t√™n|\t\t|Qu·∫©y|\t|C·ªông|\t|T√≠nh ti·ªÅn\n';

    for (const userId in memberInfo) {
        for (const date in memberInfo[userId]) {
            const info = memberInfo[userId][date];
            response += `${info['ten']}\t\t${info['quay']}q +\t${info['keo']}c\t${info['tinh_tien']}vnƒë\n`;
        }
    }

    if (response === '') {
        response = 'Ch∆∞a c√≥ s·ªë n√†o ƒë∆∞·ª£c g·ª≠i trong nh√≥m.';
    }

    bot.sendMessage(chatId, response);
});

// L·ªánh ƒë·ªÉ t√≠nh to√°n b·∫£ng c√¥ng theo ng√†y m√† ng∆∞·ªùi d√πng y√™u c·∫ßu
bot.onText(/\/bc(\d{1,2})?\/(\d{1,2})?\/(\d{4})?/, (msg, match) => {
    const chatId = msg.chat.id;
    const requestedDate = match[0] ? new Date(`${match[3] || new Date().getFullYear()}-${match[2] || (new Date().getMonth() + 1)}-${match[1] || new Date().getDate()}`).toLocaleDateString() : new Date().toLocaleDateString();

    let response = `B·∫£ng c√¥ng ng√†y ${requestedDate}:\n`;
    response += 'H·ªç t√™n\t\tQu·∫©y\tK√©o\tT√≠nh ti·ªÅn\n';

    let found = false;
    for (const userId in memberInfo) {
        for (const date in memberInfo[userId]) {
            if (date === requestedDate) {
                const info = memberInfo[userId][date];
                response += `${info['ten']}\t\t${info['quay']}q +\t${info['keo']}c\t${info['tinh_tien']}vnƒë\n`;
                found = true;
            }
        }
    }

    if (!found) {
        response = 'Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y n√†y.';
    }

    bot.sendMessage(chatId, response);
});

