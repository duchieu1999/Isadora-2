const TelegramBot = require("node-telegram-bot-api");
const mongoose = require("mongoose");


mongoose.connect('mongodb+srv://duchieufaryoung0:80E9gUahdOXmGKuy@cluster0.6nlv1cv.mongodb.net/telegram_bot_db?retryWrites=true&w=majority', { useNewUrlParser: true, useUnifiedTopology: true });

const accountSchema = new mongoose.Schema({
  userId: { type: Number, required: true, unique: true },
  username: String,
  gold: Number,
  specialGemCount: Number,
  spinCount: Number,
  robberyCount: Number,
  level: Number,
  exp: Number,
  islandImage: String,
  lastSpecialSpinTime: Date,
  lastRobberyTime: { type: Date, default: null },
  islandUpgradeCount: {
    type: Number,
    default: 0,
  },
  currentIslandImageUrl: {
    type: String,
    default: 'default-island-url',
  },
});

const bot = new TelegramBot('', {
  polling: true,
  request: {
    prefer_authorize: 'never',
    preferred_language: 'vi',
  },
});


const Account = mongoose.model('Account', accountSchema);



bot.onText(/ƒê·∫£o c∆∞·ªõp bi·ªÉn/, async (msg) => {
  const userId = msg.from.id;
  let account = await Account.findOne({ userId });

  if (!account) {
    account = new Account({
      userId,
      username: msg.from.username,
      gold: 100000,
      specialGemCount: 0,
      spinCount: 10,
      robberyCount: 5,
      level: 1,
      exp: 0,
      islandImage: 'https://img.upanh.tv/2023/11/23/Cap0.jpg',
    });

    await account.save();
  }

  bot.sendMessage(msg.chat.id, `Ch√†o m·ª´ng, ${msg.from.first_name}!`, {
    reply_markup: {
      keyboard: [
        [{ text: 'ƒê·∫£o C·ªßa B·∫°n üèùÔ∏è' }], [{ text: 'Quay Th∆∞·ªüng üé∞' }, { text: 'V√≤ng Quay ƒê·∫∑c Bi·ªát üÉè' }],
        [{ text: 'N√¢ng C·∫•p H√≤n ƒê·∫£o üöÄ' }], [{ text: 'ƒêi C∆∞·ªõp Bi·ªÉn ‚ò†Ô∏è' }],[{ text: 'Quay l·∫°i'}],
      ],
      resize_keyboard: true,
    },
  });
});

// X·ª≠ l√Ω khi nh·∫•n v√†o n√∫t reply keyboard Qu·∫£n l√Ω ng∆∞·ªùi d√πng
bot.onText(/Qu·∫£n l√Ω ng∆∞·ªùi d√πng/, async (msg) => {
  const adminUsername = 'duchieu287'; // Replace with the actual admin username

  if (msg.from.username === adminUsername) {
    const totalAccounts = await Account.countDocuments();
    const totalSpecialGems = await Account.aggregate([{ $group: { _id: null, total: { $sum: "$specialGemCount" } } }]);

    const replyMessage = `
      T·ªïng s·ªë t√†i kho·∫£n hi·ªán t·∫°i: ${totalAccounts}
      T·ªïng s·ªë Ng·ªçc Bi·ªÉn Huy·ªÅn B√≠: ${totalSpecialGems.length > 0 ? totalSpecialGems[0].total : 0}
    `;

    bot.sendMessage(msg.chat.id, replyMessage);
  } else {
    bot.sendMessage(msg.chat.id, 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o qu·∫£n l√Ω ng∆∞·ªùi d√πng.');
  }
});


bot.onText(/ƒê·∫£o C·ªßa B·∫°n/, async (msg) => {
  const userId = msg.from.id;
  const account = await Account.findOne({ userId });

  if (account) {
    bot.sendPhoto(msg.chat.id, account.islandImage, {
      caption: `
        Th√¥ng tin ƒë·∫£o c·ªßa b·∫°n:
        T·∫∑c danh: ${account.username} üßë
        S·ªë V√†ng: ${account.gold} V√†ng üåï
        Ng·ªçc Bi·ªÉn Huy·ªÅn B√≠: ${account.specialGemCount} Vi√™nüîÆ
        S·ªë l∆∞·ª£t quay th∆∞·ªüng: ${account.spinCount} üîÑ
        S·ªë l∆∞·ª£t c∆∞·ªõp ƒë·∫£o: ${account.robberyCount} ‚ò†Ô∏è
        Level: ${account.level} üéöÔ∏è
        Exp: ${account.exp} üåü
            `,
    });
  } else {
    bot.sendMessage(msg.chat.id, 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.');
  }
});

// Add your other handlers here...

// X·ª≠ l√Ω khi nh·∫•n v√†o n√∫t reply keyboard Quay Th∆∞·ªüng
let spinInProgress = false;

bot.onText(/Quay Th∆∞·ªüng/, async (msg) => {
  const userId = msg.from.id;
  let account = await Account.findOne({ userId });
  const spinImage = 'https://img.upanh.tv/2023/11/25/Spin2.gif';

  // Ki·ªÉm tra n·∫øu quay th∆∞·ªüng ƒëang di·ªÖn ra, kh√¥ng ph·∫£n h·ªìi v√† x√≥a tin nh·∫Øn "Quay Th∆∞·ªüng" m·ªõi
  if (spinInProgress) {
    bot.deleteMessage(msg.chat.id, msg.message_id);
    return;
  }

  if (account && account.spinCount > 0) {

    // G·ª≠i ·∫£nh GIF b·∫±ng h√†m sendDocument v√† l·∫•y message ID
    const spinMessage = await bot.sendDocument(msg.chat.id, spinImage, { caption: 'ƒêang quay th∆∞·ªüng...' });
    const spinMessageId = spinMessage.message_id;

    // ƒê·∫∑t c·ªù b√°o hi·ªáu ƒëang quay th∆∞·ªüng
    spinInProgress = true;

    // Gi·∫£m s·ªë l∆∞·ª£t quay v√† l∆∞u v√†o database
    account.spinCount--;
    await account.save();

    setTimeout(async () => {

      // T√≠nh x√°c su·∫•t th∆∞·ªüng 
      const randomNumber = Math.random() * 100;
      let reward;

      if (randomNumber < 60) {
        // 60% v√†ng t·ª´ 2000 ƒë·∫øn 30000 v√†ng
        const goldAmount = Math.floor(Math.random() * (30000 - 2000 + 1)) + 2000;
        account.gold += goldAmount;
        reward = `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${goldAmount} üåï v√†ng!`;
      } else if (randomNumber < 80) {
        // 20% exp t·ª´ 2 ƒë·∫øn 12 exp
        const expAmount = Math.floor(Math.random() * (12 - 2 + 1)) + 2;
        account.exp += expAmount;
        reward = `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${expAmount}  üåü exp!`;
      } else if (randomNumber < 90) {
        // 10% s·ªë l∆∞·ª£t quay t·ª´ 1 ƒë·∫øn 5
        const spinAmount = Math.floor(Math.random() * (5 - 1 + 1)) + 1;
        account.spinCount += spinAmount;
        reward = `B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√™m ${spinAmount} l∆∞·ª£t quay th∆∞·ªüng! üé∞`;
      } else {
        // 10% s·ªë l∆∞·ª£t c∆∞·ªõp ƒë·∫£o l√† 1
        account.robberyCount += 1;
        reward = 'B·∫°n nh·∫≠n ƒë∆∞·ª£c th√™m 1 l∆∞·ª£t c∆∞·ªõp ƒë·∫£o! ‚ò†Ô∏è';
      }

      // L∆∞u l·∫°i th√¥ng tin t√†i kho·∫£n
      await account.save();

      // Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp th∆∞·ªüng
      bot.sendMessage(msg.chat.id, reward);
      // X√≥a tin nh·∫Øn ·∫£nh GIF sau khi hi·ªÉn th·ªã k·∫øt qu·∫£
      bot.deleteMessage(msg.chat.id, spinMessageId);
      // Reset c·ªù b√°o hi·ªáu ƒë√£ k·∫øt th√∫c quay th∆∞·ªüng
      spinInProgress = false;

    }, 3500);
  } else if (account && account.spinCount === 0) {
    bot.sendMessage(msg.chat.id, 'üö´ B·∫°n ƒë√£ h·∫øt l∆∞·ª£t quay th∆∞·ªüng. V√†o V√≤ng Quay ƒê·∫∑c Bi·ªát ƒë·ªÉ c√≥ th·ªÉ nh·∫≠n th√™m l∆∞·ª£t quay');
  } else {
    bot.sendMessage(msg.chat.id, 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.');
  }
});

// X·ª≠ l√Ω khi nh·∫•n v√†o c√°c n√∫t kh√°c trong reply_markup
bot.on('callback_query', (query) => {
  // Ki·ªÉm tra n·∫øu ƒëang quay th∆∞·ªüng, x√≥a tin nh·∫Øn v√† kh√¥ng ph·∫£n h·ªìi
  if (spinInProgress) {
    bot.deleteMessage(query.message.chat.id, query.message.message_id);
  } else {
    // X·ª≠ l√Ω c√°c n√∫t callback_query kh√°c n·∫øu c·∫ßn
    // ...
  }
});

// X·ª≠ l√Ω khi nh·∫•n v√†o c√°c n√∫t reply_markup ƒê·∫£o C·ªßa B·∫°n, N√¢ng C·∫•p H√≤n ƒê·∫£o, ƒêi C∆∞·ªõp Bi·ªÉn
bot.onText(/ƒê·∫£o C·ªßa B·∫°n|N√¢ng C·∫•p H√≤n ƒê·∫£o|ƒêi C∆∞·ªõp Bi·ªÉn/, (msg) => {
  // Ki·ªÉm tra n·∫øu ƒëang quay th∆∞·ªüng, x√≥a tin nh·∫Øn v√† kh√¥ng ph·∫£n h·ªìi
  if (spinInProgress) {
    bot.deleteMessage(msg.chat.id, msg.message_id);
  } else {
    // X·ª≠ l√Ω c√°c n√∫t reply_markup kh√°c n·∫øu c·∫ßn
    // ...
  }
});
// ...


// X·ª≠ l√Ω khi nh·∫•n v√†o n√∫t reply keyboard Quay Th∆∞·ªüng
bot.onText(/V√≤ng Quay ƒê·∫∑c Bi·ªát/, async (msg) => {
  const userId = msg.from.id;
  let account = await Account.findOne({ userId });
  const spinImage = 'https://img.upanh.tv/2023/11/25/Goldspin.gif';

  // Ki·ªÉm tra n·∫øu quay th∆∞·ªüng ƒëang di·ªÖn ra, kh√¥ng ph·∫£n h·ªìi v√† x√≥a tin nh·∫Øn m·ªõi
  if (spinInProgress) {
    bot.deleteMessage(msg.chat.id, msg.message_id);
    return;
  }

  if (account && account.spinCount > 0) {
    // Ki·ªÉm tra n·∫øu ƒë√£ quay v√≤ng quay ƒë·∫∑c bi·ªát trong ng√†y
    const currentTime = new Date();
    const timeDiffInHours = account.lastSpecialSpinTime
      ? (currentTime - account.lastSpecialSpinTime) / (1000 * 60 * 60)
      : 24; // Set a default value of 24 hours if no previous record is found

    if (timeDiffInHours >= 24) {
      // G·ª≠i ·∫£nh GIF b·∫±ng h√†m sendDocument v√† l·∫•y message ID
      const spinMessage = await bot.sendDocument(msg.chat.id, spinImage, { caption: 'ƒêang quay th∆∞·ªüng...' });
      const spinMessageId = spinMessage.message_id;

      // ƒê·∫∑t c·ªù b√°o hi·ªáu ƒëang quay th∆∞·ªüng
      spinInProgress = true;

      // Gi·∫£m s·ªë l∆∞·ª£t quay v√† l∆∞u v√†o database
      account.spinCount--;
      account.lastSpecialSpinTime = currentTime;
      await account.save();

      // ƒê·∫∑t ƒë·ªô tr·ªÖ 5 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ quay th∆∞·ªüng
      setTimeout(async () => {
        const isSpecialSpin = Math.random() <= 0.05; // 5% probability for a special spin
        let reward;

        if (isSpecialSpin) {
          // 5% c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c 200-400 s·ªë l∆∞·ª£t quay th∆∞·ªüng
          const specialSpinAmount = Math.floor(Math.random() * (400 - 200 + 1)) + 200;
          account.spinCount += specialSpinAmount;
          reward = `Ch√∫c m·ª´ng ü•≥! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${specialSpinAmount} s·ªë l∆∞·ª£t quay th∆∞·ªüng.`;
        } else {
          // 95% nh·∫≠n ƒë∆∞·ª£c 50-150 s·ªë l∆∞·ª£t quay th∆∞·ªüng
          const normalSpinAmount = Math.floor(Math.random() * (150 - 50 + 1)) + 50;
          account.spinCount += normalSpinAmount;
          reward = `Ch√∫c m·ª´ng ü•≥! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${normalSpinAmount} s·ªë l∆∞·ª£t quay th∆∞·ªüng.`;
        }

        // L∆∞u l·∫°i th√¥ng tin t√†i kho·∫£n
        await account.save();

        // Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp th∆∞·ªüng
        bot.sendMessage(msg.chat.id, reward);

        // X√≥a tin nh·∫Øn ·∫£nh GIF sau khi hi·ªÉn th·ªã k·∫øt qu·∫£
        bot.deleteMessage(msg.chat.id, spinMessageId);

        // Reset c·ªù b√°o hi·ªáu ƒë√£ k·∫øt th√∫c quay th∆∞·ªüng
        spinInProgress = false;
      }, 5000); // 5 seconds delay
    } else {
      // Th√¥ng b√°o n·∫øu ch∆∞a h·∫øt th·ªùi gian ch·ªù ƒë·ªÉ quay v√≤ng quay ƒë·∫∑c bi·ªát
      const remainingTime = Math.ceil(24 - timeDiffInHours);
      const formattedTime = remainingTime > 1 ? `${remainingTime} gi·ªù` : '1 gi·ªù';

      // T·∫°o n√∫t Reply_markup cho vi·ªác x√°c nh·∫≠n s·ª≠ d·ª•ng Vi√™n Ng·ªçc Bi·ªÉn Th·∫ßn B√≠
      const replyMarkup = {
        reply_markup: {
          keyboard: [
            [{ text: 'ƒê·ªìng √Ω' }],
            [{ text: 'Tr·ªü l·∫°i' }],
          ],
          resize_keyboard: true,
        },
      };

      // G·ª≠i tin nh·∫Øn x√°c nh·∫≠n
      bot.sendMessage(
        msg.chat.id,
        `B·∫°n ƒë√£ h·∫øt l∆∞·ª£t th∆∞·ªüng ƒë·∫∑c bi·ªát h√¥m nay, h√£y ch·ªù ${formattedTime} n·ªØa ƒë·ªÉ c√≥ th√™m l∆∞·ª£t quay mi·ªÖn ph√≠. B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng 46 Vi√™n Ng·ªçc Bi·ªÉn Huy·ªÅn B√≠ üîÆ ƒë·ªÉ quay ngay kh√¥ng? (S·ª≠ d·ª•ng 46 Vi√™n Ng·ªçc Bi·ªÉn üîÆ s·∫Ω tƒÉng x5 ph·∫ßn th∆∞·ªüng nh·∫≠n ƒë∆∞·ª£c)`,
        replyMarkup
      );
    }
  } else if (account && account.spinCount === 0) {
    bot.sendMessage(msg.chat.id, 'B·∫°n ƒë√£ h·∫øt l∆∞·ª£t quay th∆∞·ªüng.');
  } else {
    bot.sendMessage(msg.chat.id, 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.');
  }
});

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn "ƒê·ªìng √Ω" ho·∫∑c "Quay v·ªÅ"
bot.onText(/ƒê·ªìng √Ω|Tr·ªü l·∫°i/, async (msg, match) => {
  const userId = msg.from.id;
  const choice = match[0];

  if (choice === 'ƒê·ªìng √Ω') {
    let account = await Account.findOne({ userId });

    if (account && account.specialGemCount >= 46) {
      // Tr·ª´ 46 vi√™n ng·ªçc bi·ªÉn th·∫ßn b√≠
      account.specialGemCount -= 46;

      // Reset s·ªë gi·ªù ch·ªù quay th∆∞·ªüng ƒë·∫∑c bi·ªát
      account.lastSpecialSpinTime = new Date(0);

      // L∆∞u l·∫°i th√¥ng tin t√†i kho·∫£n
      await account.save();

      // Th·ª±c hi·ªán quay th∆∞·ªüng ƒë·∫∑c bi·ªát
      const spinImage = 'https://img.upanh.tv/2023/11/25/Goldspin.gif';

      // G·ª≠i ·∫£nh GIF b·∫±ng h√†m sendDocument v√† l·∫•y message ID
      const spinMessage = await bot.sendDocument(msg.chat.id, spinImage, { caption: 'ƒêang quay th∆∞·ªüng ƒë·∫∑c bi·ªát...' });
      const spinMessageId = spinMessage.message_id;

      // ƒê·∫∑t c·ªù b√°o hi·ªáu ƒëang quay th∆∞·ªüng
      spinInProgress = true;

      // ƒê·∫∑t ƒë·ªô tr·ªÖ 5 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£ quay th∆∞·ªüng
      setTimeout(async () => {
        const isSpecialSpin = Math.random() <= 0.1; // 5% probability for a special spin
        let reward;

        if (isSpecialSpin) {
          // 5% c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c 200-400 s·ªë l∆∞·ª£t quay th∆∞·ªüng
          const specialSpinAmount = Math.floor(Math.random() * (675 - 540 + 1)) + 540;
          account.spinCount += specialSpinAmount;
          reward = `Ch√∫c m·ª´ng ü•≥! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${specialSpinAmount} s·ªë l∆∞·ª£t quay th∆∞·ªüng!`;
        } else {
          // 95% nh·∫≠n ƒë∆∞·ª£c 50-150 s·ªë l∆∞·ª£t quay th∆∞·ªüng
          const normalSpinAmount = Math.floor(Math.random() * (405 - 270 + 1)) + 270;
          account.spinCount += normalSpinAmount;
          reward = `Ch√∫c m·ª´ng ü•≥! b·∫°n nh·∫≠n ƒë∆∞·ª£c ${normalSpinAmount} s·ªë l∆∞·ª£t quay th∆∞·ªüng.`;
        }

        // L∆∞u l·∫°i th√¥ng tin t√†i kho·∫£n
        await account.save();

        // Hi·ªÉn th·ªã th√¥ng ƒëi·ªáp th∆∞·ªüng
        bot.sendMessage(msg.chat.id, reward);

        // X√≥a tin nh·∫Øn ·∫£nh GIF sau khi hi·ªÉn th·ªã k·∫øt qu·∫£
        bot.deleteMessage(msg.chat.id, spinMessageId);

        // Reset c·ªù b√°o hi·ªáu ƒë√£ k·∫øt th√∫c quay th∆∞·ªüng
        spinInProgress = false;
      }, 5000); // 5 seconds delay
    } else {
      bot.sendMessage(msg.chat.id, 'B·∫°n kh√¥ng ƒë·ªß Ng·ªçc Bi·ªÉn Huy·ªÅn B√≠ üîÆ ƒë·ªÉ th·ª±c hi·ªán ƒëi·ªÅu n√†y. H√£y n·∫°p th√™m.');
    }
  } else if (choice === 'Quay v·ªÅ') {
    // Th·ª±c hi·ªán x·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn "Quay v·ªÅ"
    // ...
  }
});




const robbingStatus = {};
let selectedRobberUsername;

bot.onText(/C∆∞·ªõp ƒê·∫£o Ngay c·ªßa @(.+)/, async (msg, match) => {
  const userId = msg.from.id;
  const account = await Account.findOne({ userId });

  if (selectedRobberUsername && selectedRobberUsername === match[1]) {
    if (!robbingStatus[userId] && account && account.robberyCount > 0) {
      const currentTime = new Date();
      const lastRobberyTime = account.lastRobberyTime || new Date(0);
      const timeDiffInSeconds = (currentTime - lastRobberyTime) / 1000;

      if (timeDiffInSeconds >= 86400) {
        robbingStatus[userId] = true;

        const targetAccount = await Account.findOne({
          username: selectedRobberUsername,
          userId: { $ne: userId },
          gold: { $gt: 0 },
        });

        if (targetAccount) {
          const isHighAmount = Math.random() <= 0.1;
          const stolenAmount = isHighAmount
            ? Math.floor(Math.random() * (350000 - 200000 + 1)) + 200000
            : Math.floor(Math.random() * (140000 - 85000 + 1)) + 85000;

          targetAccount.gold -= stolenAmount;
          account.gold += stolenAmount;
          account.lastRobberyTime = currentTime;

          account.robberyCount--;

          await targetAccount.save();
          await account.save();

          bot.sendPhoto(msg.chat.id, targetAccount.islandImage, {
            caption: ` ‚ò†Ô∏è B·∫°n ƒë√£ c∆∞·ªõp th√†nh c√¥ng ${stolenAmount} v√†ng t·ª´ h√≤n ƒë·∫£o c·ªßa @${selectedRobberUsername}!
                  Th√¥ng tin h√≤n ƒë·∫£o ƒë√£ c∆∞·ªõp:
                  T·∫∑c Danh: ${selectedRobberUsername}
                  S·ªë V√†ng c√≤n l·∫°i: ${targetAccount.gold} üåï
                        
                       
                  Level: ${targetAccount.level} 
                  Exp: ${targetAccount.exp} üåü
                    `,
          });

          const messageToVictim = `
B·∫°n v·ª´a b·ªã c∆∞·ªõp ${stolenAmount} v√†ng b·ªüi t·∫∑c danh ${account.username}!
                        S·ªë V√†ng hi·ªán t·∫°i c·ªßa b·∫°n: ${targetAccount.gold}
`;

          bot.sendMessage(targetAccount.userId, messageToVictim);
        } else {
          bot.sendMessage(msg.chat.id, 'H√≤n ƒë·∫£o ·∫£o ·∫£nh ho·∫∑c kh√¥ng th·ªÉ c∆∞·ªõp h√≤n ƒë·∫£o n√†y.');
        }

        robbingStatus[userId] = false;
      } else {
        const remainingTime = 86400 - timeDiffInSeconds;
        bot.sendMessage(
          msg.chat.id,
          `üö´ B·∫°n ƒë√£ c∆∞·ªõp h√≤n ƒë·∫£o h√¥m nay, b·∫°n ch·ªâ c√≥ th·ªÉ c∆∞·ªõp m·ªôt ƒë·∫£o m·ªôt l·∫ßn trong 24 ti·∫øng. Vui l√≤ng ƒë·ª£i ${remainingTime.toFixed(0)} gi√¢y.`
        );
      }
    } else if (account && account.robberyCount === 0) {
      bot.sendMessage(msg.chat.id, 'B·∫°n ƒë√£ h·∫øt l∆∞·ª£t c∆∞·ªõp ƒë·∫£o.');
    }
  } else {
    bot.sendMessage(msg.chat.id, 'B·∫°n ch·ªâ c√≥ th·ªÉ c∆∞·ªõp ƒë·∫£o ƒë√£ t√¨m ƒë∆∞·ª£c.');
  }
});

// ...

// Function to generate the main menu keyboard
function generateMainMenuKeyboard() {
  return {
    keyboard: [
      [{ text: 'ƒê·∫£o C·ªßa B·∫°n üèùÔ∏è' }], [{ text: 'Quay Th∆∞·ªüng üéâ' }, { text: 'V√≤ng Quay ƒê·∫∑c Bi·ªát üÉè' }],
      [{ text: 'N√¢ng C·∫•p H√≤n ƒê·∫£o üöÄ' }], [{ text: 'ƒêi C∆∞·ªõp Bi·ªÉn ‚ò†Ô∏è' }], [{text: 'Quay l·∫°i'}],
    ],
    resize_keyboard: true,
  };
}

bot.onText(/ƒêi C∆∞·ªõp Bi·ªÉn/, async (msg) => {
  selectedRobberUsername = '';
  const randomAccount = await Account.aggregate([
    { $match: { gold: { $gt: 0 } } },
    { $sample: { size: 1 } }
  ]);

  if (randomAccount.length > 0) {
    selectedRobberUsername = randomAccount[0].username;

    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: `C∆∞·ªõp ƒê·∫£o Ngay c·ªßa @${selectedRobberUsername}` }],
          [{ text: 'Tr·ªü l·∫°i' }],
        ],

        resize_keyboard: true,
      },
    };

    bot.sendMessage(msg.chat.id, `ƒê√£ t√¨m th·∫•y m·ªôt h√≤n ƒë·∫£o @${selectedRobberUsername} ƒë·ªÉ c∆∞·ªõp.`, keyboard)
  } else {
    bot.sendMessage(msg.chat.id, 'Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ph√π h·ª£p ƒë·ªÉ c∆∞·ªõp v√†ng.');
  }
});

bot.onText(/N√¢ng C·∫•p H√≤n ƒê·∫£o/, async (msg) => {
  const userId = msg.from.id;
  const account = await Account.findOne({ userId });

  if (account) {
    const upgradeCost = calculateIslandUpgradeCost(account.islandUpgradeCount);

    const confirmMessage = `B·∫°n c√≥ mu·ªën n√¢ng c·∫•p h√≤n ƒë·∫£o l√™n c·∫•p ${account.islandUpgradeCount + 1} v·ªõi s·ªë ti·ªÅn l√† ${upgradeCost} v√†ng. B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n√¢ng c·∫•p kh√¥ng?`;
    const confirmOptions = {
      reply_markup: {
        keyboard: [
          [{ text: 'X√°c nh·∫≠n n√¢ng c·∫•p' }],
          [{ text: 'Tr·ªü l·∫°i' }],
        ],
        resize_keyboard: true,
      },
    };

    bot.sendMessage(msg.chat.id, confirmMessage, confirmOptions);

    bot.onText(/X√°c nh·∫≠n n√¢ng c·∫•p/, async (msg) => {
      if (account.gold >= upgradeCost) {
        account.gold -= upgradeCost;
        account.islandUpgradeCount++;

        if (account.islandUpgradeCount === 1) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap1.jpg';
        }
        if (account.islandUpgradeCount === 2) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap2.jpg';
        }
        if (account.islandUpgradeCount === 3) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap3.jpg';
        }
        if (account.islandUpgradeCount === 4) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap4.jpg';
        }
        if (account.islandUpgradeCount === 5) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap5.jpg';
        }
        if (account.islandUpgradeCount === 6) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap6.jpg';
        }
        if (account.islandUpgradeCount === 7) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap7.jpg';
        }
        if (account.islandUpgradeCount === 8) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap8.jpg';
        }
        if (account.islandUpgradeCount === 9) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap9.jpg';
        }
        if (account.islandUpgradeCount === 10) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap10.jpg';
        }
        if (account.islandUpgradeCount === 11) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap11.jpg';
        }
        if (account.islandUpgradeCount === 12) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap12.jpg';
        }
        if (account.islandUpgradeCount === 13) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap13 .jpg';
        }
        if (account.islandUpgradeCount === 14) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap14.jpg';
        }
        if (account.islandUpgradeCount === 15) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap15.jpg';
        }
        if (account.islandUpgradeCount === 16) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap19.jpg';
        }
        if (account.islandUpgradeCount === 19) {
          account.islandImage = 'https://img.upanh.tv/2023/11/23/Cap19.jpg';
        }
        else if
          (account.islandUpgradeCount === 20) {
          account.islandImage = 'https://example.com/your-island-image-url-2.jpg';
        }

        await account.save();

        const successMessage = `B·∫°n ƒë√£ n√¢ng c·∫•p h√≤n ƒë·∫£o th√†nh c√¥ng l·∫ßn th·ª© ${account.islandUpgradeCount}!`;
        bot.sendMessage(msg.chat.id, successMessage);

        bot.removeTextListener(/X√°c nh·∫≠n n√¢ng c·∫•p/);
      } else {
        const errorMessage = 'B·∫°n kh√¥ng ƒë·ªß v√†ng ƒë·ªÉ n√¢ng c·∫•p h√≤n ƒë·∫£o.';
        bot.sendMessage(msg.chat.id, errorMessage);

        bot.removeTextListener(/X√°c nh·∫≠n n√¢ng c·∫•p/);
      }
    });
  } else {
    bot.sendMessage(msg.chat.id, 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.');
  }
});
// X·ª≠ l√Ω khi nh·∫•n v√†o n√∫t Quay L·∫°i
bot.onText(/Tr·ªü l·∫°i/, async (msg) => {
  const currentTime = new Date();
  const currentHour = currentTime.getHours() + 7;
  let greetingMessage;

  let imageUrl;

  if (currentHour >= 6 && currentHour < 18) {
    const morningGreetings = [
      'Ban ng√†y l√† l√∫c t·ªët nh·∫•t ƒë·ªÉ khai th√°c t√†i nguy√™n tr√™n h√≤n ƒë·∫£o. H√£y ki·ªÉm tra m·ªè v√† b·∫°n s·∫Ω t√¨m th·∫•y nhi·ªÅu ƒëi·ªÅu b·∫•t ng·ªù!',
      'M·ªói bu·ªïi s√°ng, t√¥i t√¨m ki·∫øm c·∫£m h·ª©ng t·ª´ b·ª©c tranh tuy·ªát v·ªùi c·ªßa bi·ªÉn c·∫£ v√† b·∫Øt ƒë·∫ßu m·ªôt ng√†y m·ªõi tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng',
      'Ban ng√†y l√† th·ªùi ƒëi·ªÉm ch√∫ng ta c·∫ßn tƒÉng c∆∞·ªùng an ninh. Ai c≈©ng ph·∫£i b·∫£o v·ªá h√≤n ƒë·∫£o c·ªßa m√¨nh!',
      'C·ª≠a h√†ng c·ªßa t√¥i ƒëang m·ªü c·ª≠a, h√£y gh√© n·∫øu b·∫°n mu·ªën n√¢ng c·∫•p h√≤n ƒë·∫£o c·ªßa m√¨nh.',
      'Nh√¨n xa ra bi·ªÉn c·∫£ bu·ªïi s√°ng l√†m b·∫°n c·∫£m th·∫•y nh∆∞ ƒëang ƒë·ªëi di·ªán v·ªõi nh·ªØng cu·ªôc phi√™u l∆∞u m·ªõi.',
      // Th√™m c√°c l·ªùi ch√†o bu·ªïi s√°ng kh√°c v√†o ƒë√¢y
    ];
    greetingMessage = morningGreetings[Math.floor(Math.random() * morningGreetings.length)];
    // N·∫øu l√† gi·ªù t·ª´ 6h ƒë·∫øn 18h, s·ª≠ d·ª•ng h√†m sendPhoto ƒë·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh url 1
    imageUrl = 'https://img.upanh.tv/2023/11/25/Ngay1.gif'; // Thay th·∫ø b·∫±ng URL th·ª±c t·∫ø c·ªßa h√¨nh ·∫£nh
    bot.sendDocument(msg.chat.id, imageUrl, { caption: 'Ch√†o bu·ªïi s√°ng, th·ªßy th·ªß! B·∫°n ƒë√£ ki·ªÉm tra kho b√°u c·ªßa m√¨nh ch∆∞a?' });
  } else {

    const eveningGreetings = [
      'D∆∞·ªõi √°nh ƒë√®n trƒÉng, h√£y ng·ªìi l·∫°i v√† k·ªÉ cho t√¥i nghe nh·ªØng c√¢u chuy·ªán v·ªÅ nh·ªØng th·ªùi k·ª≥ huy·ªÅn b√≠ c·ªßa bi·ªÉn c·∫£.',
      'Bu·ªïi t·ªëi l√† l√∫c c√° bi·ªÉn tr·ªü n√™n tƒ©nh l·∫∑ng v√† nguy hi·ªÉm h∆°n', 'Khi b√≥ng ƒë√™m bao tr√πm, t√¥i ti·∫øp t·ª•c c√¥ng vi·ªác m·ªè c·ªßa m√¨nh. C√†ng t·ªëi, c√†ng √≠t ng∆∞·ªùi ƒë·ªÉ qu·∫•y r·ªëi.', 'Bu·ªïi t·ªëi l√† th·ªùi gian tuy·ªát v·ªùi ƒë·ªÉ mua s·∫Øm. C·ª≠a h√†ng c·ªßa ta ƒëang c√≥ nh·ªØng ∆∞u ƒë√£i ƒë·∫∑c bi·ªát ƒë√≥', 'D∆∞·ªõi b√≥ng t·ªëi, h√£y c·∫©n th·∫≠n, nh·ªØng c√¢u chuy·ªán v·ªÅ h·ªìn ma tr√™n bi·ªÉn c·∫£ c√≥ th·ªÉ l√† c√≥ th·∫≠t',
      // Th√™m c√°c l·ªùi ch√†o bu·ªïi t·ªëi kh√°c v√†o ƒë√¢y
    ];
    greetingMessage = eveningGreetings[Math.floor(Math.random() * eveningGreetings.length)];
    // N·∫øu kh√¥ng ph·∫£i gi·ªù t·ª´ 6h ƒë·∫øn 18h, s·ª≠ d·ª•ng h√†m sendDocument ƒë·ªÉ hi·ªÉn th·ªã h√¨nh ·∫£nh gif t·ª´ URL kh√°c
    imageUrl = 'https://img.upanh.tv/2023/11/24/dem.gif'; // Thay th·∫ø b·∫±ng URL th·ª±c t·∫ø c·ªßa h√¨nh ·∫£nh gif
    bot.sendDocument(msg.chat.id, imageUrl, { caption: 'D∆∞·ªõi √°nh trƒÉng, bi·ªÉn c·∫£ tr·ªü n√™n y√™n b√¨nh, nh∆∞ng c√≥ nh·ªØng b√≠ m·∫≠t ƒëen t·ªëi...' });
  }
  // G·ª≠i l·ªùi ch√†o t∆∞∆°ng ·ª©ng

  bot.sendMessage(msg.chat.id, greetingMessage, { reply_markup: generateMainMenuKeyboard() });
});

function calculateIslandUpgradeCost(upgradeCount) {
  const initialCost = 120000;
  const additionalCostPercentage = 0.18;
  return Math.floor(initialCost * Math.pow(1 + additionalCostPercentage, upgradeCount));
}
